# -*- coding: utf-8 -*-
"""Alceu Valença Dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_vrQfkrnD4YIHfREGkPt8X1snEqYJuK
"""

!pip install spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import spotipy
import sys
import csv
 
sp = spotipy.Spotify(client_credentials_manager = SpotifyClientCredentials(client_id="##", client_secret="###"))

def get_artist(name): 
    results = sp.search(name)
    items = results['tracks']['items']
    if len(items) > 0:
        return items[0]['artists'][0]
    else:
        return None

def get_artist_id(artist):
    return artist['id']

def get_artist_albums_id_names(id):
  albums = sp.artist_albums(id, country = 'BR', limit=37)
  albums_id_name = {}
  for i in range(len(albums['items'])):
    id = albums['items'][i]['id']
    name = albums['items'][i]['name']
    albums_id_name[id] = name
 
  return albums_id_name

def get_album_songs(album_id, album_name):
  spotify_album = {}
 
  tracks = sp.album_tracks(album_id)
  
  for n in range(len(tracks['items'])):
    id_track = tracks['items'][n]['id']
    track = sp.track(id_track)
    spotify_album[id_track] = {}
    
    spotify_album[id_track]['album'] = album_name
    spotify_album[id_track]['album_type'] = track['album']['album_type']
    spotify_album[id_track]['track_number'] = track['track_number']
    spotify_album[id_track]['id_track'] = track['id']
    spotify_album[id_track]['name'] = track['name']
    spotify_album[id_track]['popularity'] = track['popularity']
    spotify_album[id_track]['explicit'] = track['explicit']
    spotify_album[id_track]['duration_ms'] = track['duration_ms']
    spotify_album[id_track]['release_date'] = track['album']['release_date']
 
    artists_track = track['artists']
    spotify_album[id_track]['artists'] = []
    for artist in artists_track:
      spotify_album[id_track]['artists'].append(artist['name'])
  return spotify_album

def get_all_albums_songs(albums_ids_names):
  spotify_albums = []
  albums_names = []
  for id, name in albums_ids_names.items():
    if name not in albums_names:
      albums_names.append(name)
      album_songs = get_album_songs(id,name) 
    for item in album_songs.items():
      spotify_albums.append(item[1]) 
  return spotify_albums

def convert_to_csv(filepath, name):
  keys = filepath[0].keys()
  print(keys)
  csv_name = ''+ name + '.csv'
  with open(csv_name, 'w') as output_file:
    dict_writer = csv.DictWriter(output_file, keys)
    dict_writer.writeheader()
    dict_writer.writerows(filepath)
  return

name = "Alceu Valença"
artist = get_artist(name)    
if artist:
  artist_id = get_artist_id(artist)
  albums_id_names = get_artist_albums_id_names(artist_id)
  all_albums = get_all_albums_songs(albums_id_names)
  convert_to_csv(all_albums, 'alceuvalenca')   
else:
  logger.error("Can't find artist: %s", artist)

import altair as alt
import pandas as pd
 
data = pd.read_csv('alceuvalenca.csv')

data_top20 = data.sort_values('popularity', ascending = False).head(20)
alt.Chart(data_top20).mark_circle(color = '#222437', opacity = 1).encode(
    y = alt.Y('name', axis = alt.Axis(title='Nome'), sort = None),
    x = alt.X('popularity', axis = alt.Axis(title = "Popularidade")),
    tooltip = ['name', 'popularity', 'album', 'album_type']
)

data_groupby = pd.DataFrame(data, columns = ['album','album_type','popularity','duration_ms'])
 
data_groupby_album_chart =  data_groupby[data_groupby['album_type'] ==  'album']
 
bars = alt.Chart(data_groupby_album_chart).mark_bar(color = '#222437').encode(
    x=alt.X('median(popularity):Q', axis = alt.Axis(title='Mediana da Popularidade')),
    y=alt.Y('album:O', sort='-x', axis = alt.Axis(title='Álbum'))
)
text = alt.Chart(data_groupby_album_chart).mark_text(dx=-15, dy=3, color='white').encode(
    x=alt.X('median(popularity):Q', axis = alt.Axis(title='Mediana da Popularidade')),
    y=alt.Y('album:O', sort='-x', axis = alt.Axis(title='Álbum')),
    text=alt.Text('median(popularity):Q')
)
bars + text

a_groupby = pd.DataFrame(data, columns = ['album','album_type','popularity','duration_ms'])

data_groupby_album_chart =  data_groupby[data_groupby['album_type'] ==  'single']

bars = alt.Chart(data_groupby_album_chart).mark_bar(color = '#222437').encode(
    x=alt.X('median(popularity):Q', axis = alt.Axis(title='Mediana da Popularidade')),
    y=alt.Y('album:O', sort='-x', axis = alt.Axis(title='Álbum'))
)
text = alt.Chart(data_groupby_album_chart).mark_text(dx=-15, dy=3, color='white').encode(
    x=alt.X('median(popularity):Q', axis = alt.Axis(title='Mediana da Popularidade')),
    y=alt.Y('album:O', sort='-x', axis = alt.Axis(title='Álbum')),
    text=alt.Text('median(popularity):Q')
)
bars + text

data_tracks = pd.DataFrame(data, columns = ['name','album','duration_ms'])
chart = alt.Chart(data_tracks).mark_bar(color = '#222437').encode(
    y=alt.Y('name:N', sort='-x', axis = alt.Axis(title='Música')),
    x=alt.X('duration_ms:Q', axis = alt.Axis(title='Duração(ms)')),
    tooltip = ['name', 'album']
).transform_window(
    rank='rank(duration_ms)',
    sort=[alt.SortField('duration_ms', order='descending')]
).transform_filter(
    (alt.datum.rank < 30)
) 
text = alt.Chart(data_tracks).mark_text(dx=-25, dy=3, color='white').encode(
    y=alt.Y('name:N', sort='-x'),
    x=alt.X('duration_ms:Q'),
    text=alt.Text('duration_ms:Q')
).transform_window(
    rank='rank(duration_ms)',
    sort=[alt.SortField('duration_ms', order='descending')]
).transform_filter(
    (alt.datum.rank < 30)
) 
chart + text

data_time= pd.DataFrame(data, columns = ['name', 'album','album_type','release_date'])
range_ = ['#222437', '#B183AE']
alt.Chart(data_time).mark_circle(opacity = 1).encode(
    y = alt.Y('release_date:T', axis = alt.Axis(title='Lançamento')),
    x = alt.X('album:N', sort='y', axis = alt.Axis(title='Álbum')),
    color = alt.Color('album_type', legend=alt.Legend(title="Tipo do álbum"), scale=alt.Scale(range = range_)),
    tooltip = ['album','album_type','release_date:T']
)